/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/* BASIC CSS FOR RESETING - UNIVERSAL SELECTOR (APPLIES THIS STYLES TO EACH ELEMENT OF THE PAGE)
 NORMALLY BRWOSERS ADD SOME DEFAULT STYLES */

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* THIS FONT FAMILY WILL BE INHERITED BY ALL THE CHILD ELEMENTS 
 LINE HEIGHT WILL BE 1.7 TIMES BIGGER THAN THE PERDEFINED */

body {
  font-family: 'Lato', sans-serif;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.7;
  color: #777;
  padding: 30px;
}

.header {
  height: 95vh; /* 95% of the viewport height */
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)),
    url(../img/hero.jpg);
  background-size: cover; /* whatever the width of the viewport, it will allways try to fit the element on this viewport */
  background-position: top; /* Whatever the viewport size the top of the image stays the top of the container */
  clip-path: polygon(
    0 0,
    100% 0,
    100% 75vh,
    0 100%
  ); /* Specify a poligon in which the image will be visible, the four corners of the polygon starting by the top left */
  position: relative;
}

/* THE BEST WAY IS TO POSITION THE LOGO: USE ABSOULTE POSITION, 
(we will set the parent element to position: relative) */

.logo-box {
  position: absolute;
  top: 40px;
  left: 40px;
}

/* SIZE OF THE LOGO ITSELF */
.logo {
  height: 35px; /* width will set proportionally to the height */
}

/* FOR THE SEO WE DIVIDE THE H1 IN TWO PARTS USING SPAN ELEMENT AND TWO CLASSES  
    - BLOCK ELEMENTS OCUPPY THE ENTIRE AVALIABLE WIDTH AND CREATE LINE BREAKS AFTER AND BEFORE THEM (with this we will get two lines of text)
    - WE WANT TO DISPLAY THE TEXT AND THE BUTTON IN THE CENTER SO WE WILL WRAP IT IN A NEW DIV (text-box class)
    - TO CENTER THAT BOX WE WILL USE ABSOLUTE POSITIONING (remember this will poition the anchor point of the child 50% from top 50% form left)
    - WE NEED TO SHIFT THE CHILD SO WE TAKE IN MIND ITS CENTER AND NOT ITS ANCHOR POINT (top left corner)
    - WE WILL TRANSLATE THE WHOLE ELEMENT WITH TRANSLATE (50% in relation to the element itself )
*/

.text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  /* background-color: red; */
  transform: translate(-50%, -50%);
  text-align: center;
}

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  backface-visibility: hidden; /* This is a trick to prevent any strange shakiness because of the animation */
  margin-bottom: 60px;
}

.heading-primary-main {
  display: block;
  font-size: 60px;
  font-weight: 400;
  letter-spacing: 35px;

  animation-name: moveInLeft;
  animation-duration: 1s;
  animation-timing-function: ease-out;
  /* animation-delay: 3s; */
  /* animation-iteration-count: 3; */
}

.heading-primary-sub {
  display: block;
  font-size: 20px;
  font-weight: 700;
  letter-spacing: 17.4px;

  /* We can use a shorthand */
  animation: moveInRight 1s ease-out;
}

/* TWO TYPES OF ANIMATIONS IN CSS
  - TRANSITION PROPERTY AND TRIGER WITH EVENTS LIKE HOVER
  - KEYFRAMES ( for browser optimization it is best to animate just two properties at the time)
 */

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-100px);
  }
  80% {
    transform: translateX(8px);
  }
  100% {
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(100px);
  }
  80% {
    transform: translateX(-8px);
  }
  100% {
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes moveInButton {
  0% {
    opacity: 0;
    transform: translateY(30px);
  }
  100% {
    opacity: 1;
    transform: translate(0);
  }
}

/* PSEUDO CLASSES ARE SPECIAL STATES OF A SELECTOR ELEMENT
  - FOR EXAMPLE LINK, VISITED, HOVER

  AS WE DECLARED THE BUTTON AS AN INLINE-BLOCK IT WILL BE TREATED AS TEXT, AND WE CAN ALIGN IT TO THE CENTER EASYLY:
  - SETTING THE CONTAINING ELEMENT TO text-align: center (.text-box)

  WE WILL ANIMATE THE BUTTON WITH THE TRANSITION PROPERTY IN THE INITIAL STATE
  - SPECIFY WICH PROPERTIES WE WILL ANIMATE
  - SPECIFY THE DURATION

*/

.btn:link,
.btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  padding: 15px 40px;
  display: inline-block; /* this way the blocks model works with this element as if it was a normal box with its own padding, width and height */
  border-radius: 100px;
  transition: all 0.2s;
  position: relative;
}

.btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2); /* X direction offset, Y direction offset, blur, color */
}

.btn:active {
  transform: translateY(-1px);
  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
}

.btn-white {
  background-color: #fff;
  color: #777;
}

/* PSEUDO ELEMENTS LET US STYLE CERTAIN PARTS OF ELEMENTS
  - AFTER PSUDO ELEMENT, LETS US STYLE A VIRTUAL ELEMENT RIGHT AFTER THE ELEMENT WE'RE SELECTING
  - WE ALLWAYS HAVE TO SPECIFY THE CONTENT AND THE DISPLAY PROPERTIES
 */

.btn::after {
  content: '';
  display: inline-block;
  height: 100%;
  width: 100%;
  border-radius: 100px;
  position: absolute; /* This absolute position needs to have a refernece: (first element witha relative position that it can find) 
  We will declare position:relative to the btn:visited itself */
  top: 0;
  left: 0;
  z-index: -1;
  transition: all 0.4s;
}

.btn-white::after {
  background-color: #fff;
}

/* We can specify some properties for the affter element when we hover it
  - remember to animate it we need to add the transition property to the inital state (.btn::after pseudoelement)
*/
.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0;
}

/* We can prevent the button from apperaing before the animation starts (Because of the delay)
  - animation-fill-mode: backwards will set the 0% properties of the animation to the button, before the animation starts 
*/
.btn-animated {
  animation: moveInButton 1s ease-out 0.75s;
  animation-fill-mode: backwards;
}
